import disnake
from disnake.ext import commands
from config import Color
import messages
import word
import punishments
import asyncio
import time
import cache
import typing
from word import ago
from disnake import ButtonStyle
from disnake.ui import Button, ActionRow

class ModCmd(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command()
    @commands.cooldown(1, 30, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def addroles(self, ctx, role: disnake.Role):
        if role >= ctx.author.top_role:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif role.managed:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π. –û–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω–∞ –∏–ª–∏ —Å–Ω—è—Ç–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", True)
        elif role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –º–æ–µ–π. –Ø –Ω–µ —Å–º–æ–≥—É –µ—ë –≤—ã–¥–∞—Ç—å.", True)
        elif role.permissions.administrator:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —è –µ—ë –Ω–µ –≤—ã–¥–∞–º.", True)
        else:
            took = 0
            embed = disnake.Embed(title="‚è≥ | –ü–æ–¥–æ–∂–¥–∏—Ç–µ", description="–ò–¥—ë—Ç –≤—ã–¥–∞—á–∞ —Ä–æ–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º.", color=Color.primary)
            msg = await ctx.send(embed=embed)
            for member in ctx.guild.members:
                if not member.bot and not role in member.roles:
                    try:
                        await member.add_roles(role)
                        took += 1
                    except:
                        pass
            if took == 0:
                embed = disnake.Embed(title="‚ùå | –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", description="–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –±—ã–ª–∞ –≤—ã–¥–∞–Ω–∞ –Ω–∏–∫–æ–º—É.", color=Color.danger)
            else:
                embed = disnake.Embed(title="‚úÖ | –ì–æ—Ç–æ–≤–æ", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–ª—É—á–∏–≤—à–∏—Ö –¥–∞–Ω–Ω—É—é —Ä–æ–ª—å: **{}**.".format(took), color=Color.success)
            await msg.edit(embed=embed)

    @commands.command()
    @commands.cooldown(1, 30, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def remroles(self, ctx, role: disnake.Role):
        if role >= ctx.author.top_role:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif role.managed:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π. –û–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–¥–∞–Ω–∞ –∏–ª–∏ —Å–Ω—è—Ç–∞ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", True)
        elif role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –º–æ–µ–π. –Ø –Ω–µ —Å–º–æ–≥—É –µ—ë —Å–Ω—è—Ç—å.", True)
        else:
            took = 0
            embed = disnake.Embed(title="‚è≥ | –ü–æ–¥–æ–∂–¥–∏—Ç–µ", description="–ò–¥—ë—Ç —Å–Ω—è—Ç–∏–µ —Ä–æ–ª–∏ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", color=Color.primary)
            msg = await ctx.send(embed=embed)
            for member in ctx.guild.members:
                if not member.bot and role in member.roles:
                    try:
                        await member.remove_roles(role)
                        took += 1
                    except:
                        pass
            if took == 0:
                embed = disnake.Embed(title="‚ùå | –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å", description="–î–∞–Ω–Ω–∞—è —Ä–æ–ª—å –Ω–µ –±—ã–ª–∞ –Ω–∏ —É –∫–æ–≥–æ —Å–Ω—è—Ç–∞.", color=Color.danger)
            else:
                embed = disnake.Embed(title="‚úÖ | –ì–æ—Ç–æ–≤–æ", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∞ —Å–Ω—è—Ç–∞ —Ä–æ–ª—å: **{}**.".format(took), color=Color.success)
            await msg.edit(embed=embed)

    @commands.command()
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def kick(self, ctx, user: disnake.Member, *, reason = None):
        if user == ctx.author:
            await messages.err(ctx, "–ö–∏–∫–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–ö–∏–∫–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ –∫–∏–∫–Ω—É—Ç—å.", True)
        else:
            if reason is None:
                reason1 = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                reason2 = '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            else:
                reason1, reason2 = reason, reason
            embed = disnake.Embed()
            try:
                await user.kick(reason=f'{ctx.author}: {reason2}')
                embed.color = Color.primary
                embed.title = 'üë¢ | –ö–∏–∫'
                embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
                '''
            except:
                embed.color = Color.danger
                embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
                embed.description = '–Ø –Ω–µ —Å–º–æ–≥ –∫–∏–∫–Ω—É—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.'
            await ctx.send(embed=embed)

    @commands.command()
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def warn(self, ctx, user: disnake.Member, *, reason = None):
        if user == ctx.author:
            await messages.err(ctx, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.bot:
            await messages.err(ctx, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å.", True)
        else:
            if reason is None:
                reason = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            w = await punishments.warn(ctx, user, reason=reason)
            embed = disnake.Embed()
            embed.color = Color.primary
            embed.title = f"‚ö† | –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ **#{w[1]}**"
            embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–ü—Ä–∏—á–∏–Ω–∞:** {reason}
                    '''
            await ctx.send(embed=embed)

    @commands.command(aliases=['uw'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def unwarn(self, ctx, user: disnake.Member, amount: int = 1):
        if user == ctx.author:
            await messages.err(ctx, "–°–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.bot:
            await messages.err(ctx, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–°–Ω–∏–º–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —É –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.", True)
        else:
            w = await punishments.unwarn(ctx, user, amount)
            if isinstance(w, int):
                embed = disnake.Embed()
                embed.color = Color.primary
                embed.title = f"‚ö† | –°–Ω—è—Ç–æ {w} {word.word_correct(w, '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π')}"
                embed.description = f'''
    **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
    **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
                        '''
                await ctx.send(embed=embed)
            else:
                await messages.err(ctx, '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–Ω—è—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.')

    @commands.command(aliases=['b'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def ban(self, ctx, user: disnake.User, time1: typing.Optional[str] = '0s', *, reason = None):
        if user == ctx.author:
            return await messages.err(ctx, "–ë–∞–Ω–∏—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.id == self.bot.user.id:
            return await messages.err(ctx, "–ë–∞–Ω–∏—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        if ctx.guild.get_member(user.id):
            user = ctx.guild.get_member(user.id)
            if user.top_role >= ctx.author.top_role:
                return await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
            elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
                return await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ –∑–∞–±–∞–Ω–∏—Ç—å.", True)
        if word.ishs(time1):
            tc = word.string_to_seconds(time1)
        else:
            tc = 0
            if reason is not None:
                reason = time1 + ' ' + reason
            else:
                reason = time1

        if reason is None:
            reason1 = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            reason2 = '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
        else:
            reason1, reason2 = reason, reason

        embed = disnake.Embed()
        try:
            embed.color = Color.danger
            if tc == 0:
                embed.title = 'üî® | –ë–∞–Ω'
                embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
                '''
                await ctx.guild.ban(user, reason=f'{ctx.author}: {reason2}')
                tc = 228133722
                await punishments.tempban(ctx, user, tc, reason1)
            else:
                embed.title = 'üî® | –í—Ä–µ–º–µ–Ω–Ω—ã–π –±–∞–Ω'
                embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {word.hms(float(tc))}
**–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
**–î–∞—Ç–∞ —Ä–∞–∑–±–∞–Ω–∞:** <t:{int(time.time()) + tc}>
                '''
                await ctx.guild.ban(user, reason=f'{ctx.author}: {reason2} | {word.hms(float(tc))}')
                await punishments.tempban(ctx, user, tc, reason1)
            
        except:
            embed.color = Color.danger
            embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
            embed.description = '–Ø –Ω–µ —Å–º–æ–≥ –∑–∞–±–∞–Ω–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.'
        await ctx.send(embed=embed)

    @commands.command(aliases=['mb', 'massban', 'mass-ban'])
    @commands.cooldown(1, 150, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def mass_ban(self, ctx, users: commands.Greedy[disnake.User], time1: typing.Optional[str] = '0s', *, reason = None):
        def check(ctx, member):
            if ctx.guild.get_member(member.id):
                member = ctx.guild.get_member(member.id)
                return member != ctx.author and member.top_role < ctx.author.top_role and member.id != self.bot.user.id and member.top_role < ctx.guild.get_member(self.bot.user.id).top_role
            else:
                return member != ctx.author and member.id != self.bot.user.id
        if len(users) > 50:
            await messages.err(ctx, "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –∑–∞ —Ä–∞–∑ –Ω–µ –±–æ–ª–µ–µ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", True)
        else:
            if word.ishs(time1):
                tc = word.string_to_seconds(time1)
            else:
                tc = 0
                if reason is not None:
                    reason = time1 + ' ' + reason
                else:
                    reason = time1

            if reason is None:
                reason1 = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
                reason2 = '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
            else:
                reason1, reason2 = reason, reason

            embed = disnake.Embed()
            embed.color = Color.danger
            banned = 0
            await ctx.send('‚è≥')
            if tc == 0:
                embed.title = f"üî® | "
                tc = 228133722
            for user in users:
                if check(ctx, user):
                    try:
                        if tc != 228133722:
                            await ctx.guild.ban(user, reason=f'–ú–∞—Å—Å–æ–≤—ã–π –±–∞–Ω –æ—Ç {ctx.author}: {reason2} | {word.hms(tc)}')
                            await punishments.tempban(ctx, user, tc, reason1)
                        else:
                            await ctx.guild.ban(user, reason=f'–ú–∞—Å—Å–æ–≤—ã–π –±–∞–Ω –æ—Ç {ctx.author}: {reason2}')
                            await punishments.tempban(ctx, user, tc, reason1)
                        banned += 1
                        await asyncio.sleep(2)
                    except:
                        pass
            
            if banned > 0:
                if tc == 228133722:
                    embed.title = f"üî® | {banned} {word.word_correct(banned, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã')}"
                    embed.description = f'''
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
                    '''
                else:
                    embed.title = f"üî® | {banned} {word.word_correct(banned, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã')}"
                    embed.description = f'''
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {word.hms(float(tc))}
**–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
**–î–∞—Ç–∞ —Ä–∞–∑–±–∞–Ω–∞:** <t:{int(time.time()) + tc}>
                    '''
            else:
                embed.title = "‚ùå | –ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω"
                embed.description = f'**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})'
            
            await ctx.send(embed=embed)

    @commands.command(aliases=['ub'])
    @commands.cooldown(1, 10, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def unban(self, ctx, user: disnake.User):
        if user.id == ctx.author.id:
            await messages.err(ctx, "–†–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–†–∞–∑–±–∞–Ω–∏–≤–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        else:
            try:
                await ctx.guild.unban(user)
                embed = disnake.Embed(color=Color.success)
                embed.title = "üîì | –†–∞–∑–±–∞–Ω"
                embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user}
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
                '''
                await ctx.send(embed=embed)
            except:
                await messages.err(ctx, "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", True)
            try:
                bans = cache.automoderation_data[ctx.guild.id]["bans"]
                del bans[str(user.id)]
                cache.automoderation.add(ctx.guild.id, {"bans": bans})
            except:
                pass

    @commands.command(aliases=['m'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def mute(self, ctx, user: disnake.Member, time1: typing.Optional[str] = '0s', *, reason = None):
        try:
            muted = cache.mutes_data[ctx.guild.id][str(user.id)]
            muted = True
        except:
            muted = False
        if user == ctx.author:
            await messages.err(ctx, "–ú—å—é—Ç–∏—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–ú—å—é—Ç–∏—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ –∑–∞–º—å—é—Ç–∏—Ç—å.", True)
        elif user.guild_permissions.administrator:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", True)
        elif muted:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —É–∂–µ –∑–∞–º—å—é—á–µ–Ω.", True)
        else:
            
            if word.ishs(time1):
                tc = word.string_to_seconds(time1)
            else:
                tc = 0
                if reason is not None:
                    reason = time1 + ' ' + reason
                else:
                    reason = time1

            if reason is None:
                reason1 = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            else:
                reason1 = reason

            embed = disnake.Embed()
            with ctx.channel.typing():
                try:
                    embed.color = Color.primary
                    if tc == 0:
                        embed.title = 'üîá | –ú—å—é—Ç'
                        embed.description = f'''
    **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
    **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
    **–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
                        '''
                        tc = 228133722
                    else:
                        embed.title = 'üîá | –í—Ä–µ–º–µ–Ω–Ω—ã–π –º—å—é—Ç'
                        embed.description = f'''
    **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
    **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
    **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {word.hms(float(tc))}
    **–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
    **–î–∞—Ç–∞ —Ä–∞–∑–º—å—é—Ç–∞:** <t:{int(time.time()) + tc}>
                        '''
                    
                    await punishments.tempmute(ctx, user, tc, reason1)
                    
                except:
                    embed.color = Color.danger
                    embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
                    embed.description = '–Ø –Ω–µ —Å–º–æ–≥ –∑–∞–º—å—é—Ç–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.'
                await ctx.send(embed=embed)

    @commands.command(aliases=['lockbot', 'lock-bot', 'lb'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def lock_bot(self, ctx, user: disnake.Member, time1: typing.Optional[str] = '0s', *, reason = None):
        try:
            muted = cache.locks_data[ctx.guild.id][str(user.id)]
            muted = True
        except:
            muted = False
        if user == ctx.author:
            await messages.err(ctx, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif not user.bot:
            await messages.err(ctx, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.", True)
        elif muted:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π –±–æ—Ç —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", True)
        else:
            
            if word.ishs(time1):
                tc = word.string_to_seconds(time1)
            else:
                tc = 0
                if reason is not None:
                    reason = time1 + ' ' + reason
                else:
                    reason = time1

            if reason is None:
                reason1 = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
            else:
                reason1 = reason

            embed = disnake.Embed()
            with ctx.channel.typing():
                try:
                    embed.color = Color.primary
                    if tc == 0:
                        embed.title = 'üîí | –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                        embed.description = f'''
    **–ë–æ—Ç:** {user} ({user.mention})
    **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
    **–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
                        '''
                        tc = 228133722
                    else:
                        embed.title = 'üîí | –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                        embed.description = f'''
    **–ë–æ—Ç:** {user} ({user.mention})
    **–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
    **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {word.hms(float(tc))}
    **–ü—Ä–∏—á–∏–Ω–∞:** {reason1}
    **–î–∞—Ç–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:** <t:{int(time.time()) + tc}>
                        '''
                    
                    await punishments.lockbot(ctx, user, tc)
                    
                except:
                    embed.color = Color.danger
                    embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
                    embed.description = '–Ø –Ω–µ —Å–º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.'
                await ctx.send(embed=embed)

    @commands.command(aliases=['unlockbot', 'unlock-bot', 'ulb'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def unlock_bot(self, ctx, user: disnake.Member):
        try:
            muted = cache.locks_data[ctx.guild.id][str(user.id)]
            muted = True
        except:
            muted = False
        if user == ctx.author:
            await messages.err(ctx, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif not user.bot:
            await messages.err(ctx, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.", True)
        elif not muted:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π –±–æ—Ç —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", True)
        else:

            embed = disnake.Embed()
            with ctx.channel.typing():
                try:
                    embed.color = Color.primary
                    embed.title = 'üîì | –ë–æ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    embed.description = f'''
**–ë–æ—Ç:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
                    '''
                    
                    await punishments.unlockbot(ctx, user)
                    
                except:
                    embed.color = Color.danger
                    embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
                    embed.description = '–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.'
                await ctx.send(embed=embed)

    @commands.command(aliases=['clear'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def purge(self, ctx, user: typing.Optional[disnake.Member] = None, amount: int = 100):
        def check(msg):
            return msg.author == user
        if amount > 1000:
            await messages.err(ctx, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–æ–ª—å—à–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π.", True)
        else:
            embed = disnake.Embed(color=Color.primary)
            embed.title = "‚ôª | –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"
            if user is None:
                deleted = len(await ctx.channel.purge(limit=amount))
                embed.description = f'–£–¥–∞–ª–µ–Ω–æ {deleted} {word.word_correct(deleted, "—Å–æ–æ–±—â–µ–Ω–∏–µ", "—Å–æ–æ–±—â–µ–Ω–∏—è", "—Å–æ–æ–±—â–µ–Ω–∏–π")}.'
            else:
                deleted = len(await ctx.channel.purge(limit=amount, check=check))
                embed.description = f'–£–¥–∞–ª–µ–Ω–æ {deleted} {word.word_correct(deleted, "—Å–æ–æ–±—â–µ–Ω–∏–µ", "—Å–æ–æ–±—â–µ–Ω–∏—è", "—Å–æ–æ–±—â–µ–Ω–∏–π")} –æ—Ç {user.mention}.'
            await ctx.send(embed=embed, delete_after=60)

    @commands.command(aliases=['um'])
    @commands.cooldown(1, 20, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def unmute(self, ctx, user: disnake.Member):
        try:
            muted = cache.mutes_data[ctx.guild.id][str(user.id)]
            muted = True
        except:
            muted = False
        if user == ctx.author:
            await messages.err(ctx, "–†–∞–∑–º—å—é—á–∏–≤–∞—Ç—å —Å–µ–±—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.author.top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –Ω–∏–∂–µ –≤–∞—à–µ–π.", True)
        elif user.id == self.bot.user.id:
            await messages.err(ctx, "–†–∞–∑–º—å—é—á–∏–≤–∞—Ç—å –º–µ–Ω—è? –°–µ—Ä—å—ë–∑–Ω–æ?! –≠—Ç–æ –Ω–µ –æ—á–µ–Ω—å —Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ.", True)
        elif user.top_role >= ctx.guild.get_member(self.bot.user.id).top_role:
            await messages.err(ctx, "–†–æ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–µ –≤—ã—à–µ –º–æ–µ–π, —è –Ω–µ —Å–º–æ–≥—É –µ–≥–æ —Ä–∞–∑–º—å—é—Ç–∏—Ç—å.", True)
        elif user.guild_permissions.administrator:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", True)
        elif not muted:
            await messages.err(ctx, "–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –∑–∞–º—å—é—á–µ–Ω.", True)
        else:
            embed = disnake.Embed()
            with ctx.channel.typing():
                try:
                    await punishments.unmute(ctx, user)
                    embed.color = Color.success
                    embed.title = "üîä | –†–∞–∑–º—å—é—Ç"
                    embed.description = f'''
**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user} ({user.mention})
**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {ctx.author} ({ctx.author.mention})
                    '''
                except:
                    embed.color = Color.danger
                    embed.title = '‚ùå | –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
                    embed.description = '–Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–º—å—é—Ç–∏—Ç—å —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞.'
                await ctx.send(embed=embed)

    @commands.command()
    @commands.check(messages.check_perms)
    @commands.cooldown(1, 10, commands.BucketType.guild)
    async def lock(self, ctx, channel: disnake.TextChannel = None):
        if channel is None:
            channel = ctx.channel
        await channel.set_permissions(ctx.guild.default_role, send_messages=False, add_reactions=False)
        await ctx.message.add_reaction('üîí')

    @commands.command()
    @commands.check(messages.check_perms)
    @commands.cooldown(1, 10, commands.BucketType.guild)
    async def unlock(self, ctx, channel: disnake.TextChannel = None):
        if channel is None:
            channel = ctx.channel
        await channel.set_permissions(ctx.guild.default_role, send_messages=None, add_reactions=None)
        await ctx.message.add_reaction('üîì')

    @commands.command(aliases=['say'])
    @commands.check(messages.check_perms)
    @commands.cooldown(1, 10, commands.BucketType.guild)
    async def echo(self, ctx, *, msg):
        await ctx.send(msg)
        await ctx.message.delete()

    @commands.command()
    @commands.cooldown(1, 5, commands.BucketType.guild)
    async def warns(self, ctx, member: disnake.Member = None):
        if member is None:
            member = ctx.author
        if member.bot:
            await messages.err(ctx, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –±–æ—Ç–∞.', True)
        else:
            try:
                w = cache.warns_data[ctx.guild.id]['members'][str(member.id)]
            except:
                w = 0
            if member == ctx.author:
                name = '–≤–∞—Å'
            else:
                name = f'**{member}**'
            await ctx.send(f"–£ {name} {w} {word.word_correct(w, '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π')}.")

    @commands.command(aliases=['serverbans', 'server-bans', 'sb'])
    @commands.cooldown(1, 5, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def bans(self, ctx):
        pages = [{}]
        total = 0
        index = 0

        if ctx.guild.id in cache.bans_data:
            bd = cache.bans_data[ctx.guild.id]
            if "_id" in bd: del bd['_id']
        else:
            bd = {}

        for ban in bd:
            user = self.bot.get_user(int(ban))
            member = ctx.guild.get_member(int(ban))
            if user and not member:
                if len(list(pages[-1])) >= 10:
                    pages.append({})
                pages[-1][str(user)] = bd[ban]
                total += 1

        embed = disnake.Embed(title = "üî® | –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –±–∞–Ω—ã", color = Color.primary)
        embed.set_footer(text=ctx.author, icon_url=ctx.author.display_avatar)
        if not total:
            embed.description = "–ù–∞–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç :)"
            return await ctx.send(embed=embed)

        embed.title += f" ({total})"

        def refresh_buttons():
            if len(pages) > 1:
                buttons = [
                    ActionRow(
                        Button(
                            style=ButtonStyle.blurple,
                            custom_id="back",
                            emoji="<:back2:1071709332758073355>",
                            disabled=index==0
                        ),
                        Button(
                            style=ButtonStyle.blurple,
                            custom_id="forward",
                            emoji="<:forward2:1071709543840624660>",
                            disabled=index==len(pages) - 1
                        ),
                        Button(
                            style=ButtonStyle.red,
                            custom_id="close",
                            emoji="<:close2:1071709845436244018>"
                        )
                    )
                ]
            else:
                    buttons = [
                    ActionRow(
                        Button(
                            style=ButtonStyle.red,
                            custom_id="close",
                            emoji="<:close2:1071709845436244018>"
                        )
                    )
                ]
            return buttons

        def refresh_embed():
            embed.clear_fields()
            embed.set_footer(text=f"{ctx.author} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {index+1} –∏–∑ {len(pages)}", icon_url=ctx.author.display_avatar)
            for user in pages[index]:
                timestamp = pages[index][user]
                if timestamp > time.time():
                    if timestamp > 1800000000: t = "–ù–∏–∫–æ–≥–¥–∞"
                    else: t = f"<t:{timestamp}:f> (<t:{timestamp}:R>)"
                    embed.add_field(name=user, value="> –î–∞—Ç–∞ —Ä–∞–∑–±–∞–Ω–∞: " + t, inline=False)

        refresh_embed()
        msg = await ctx.send(embed = embed, components=refresh_buttons())
        async def refresh_all():
            refresh_embed()
            await msg.edit(embed=embed, components=refresh_buttons())

        def check(inter):
            return inter.message.id == msg.id

        while time.time() < time.time() + 600:
            inter = await self.bot.wait_for('interaction', check=check)
            if inter.author != ctx.author:
                await inter.reply("403 Forbidden", ephemeral=True)
            else:
                if inter.component.custom_id == "begin":
                    index = 0
                    await refresh_all()
                elif inter.component.custom_id == "back":
                    index -= 1
                    await refresh_all()
                if inter.component.custom_id == "forward":
                    index += 1
                    await refresh_all()
                if inter.component.custom_id == "end":
                    index = len(pages) - 1
                    await refresh_all()
                if inter.component.custom_id == "close":
                    break

        await msg.delete()

    @commands.command(aliases=['serversmutes', 'server-mutes', 'sm'])
    @commands.cooldown(1, 5, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def mutes(self, ctx):
        pages = [{}]
        total = 0
        index = 0

        if ctx.guild.id in cache.mutes_data:
            bd = cache.mutes_data[ctx.guild.id]
            if "_id" in bd: del bd['_id']
        else:
            bd = {}

        for mute in bd:
            user = self.bot.get_user(int(mute))
            member = ctx.guild.get_member(int(mute))
            if user and member:
                if len(list(pages[-1])) >= 10:
                    pages.append({})
                pages[-1][str(user)] = bd[mute]
                total += 1

        embed = disnake.Embed(title = "üîá | –î–µ–π—Å—Ç–≤—É—é—â–∏–µ –º—å—é—Ç—ã", color = Color.primary)
        embed.set_footer(text=ctx.author, icon_url=ctx.author.display_avatar)
        if not total:
            embed.description = "–ù–∞–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç :)"
            return await ctx.send(embed=embed)

        embed.title += f" ({total})"

        def refresh_buttons():
            if len(pages) > 1:
                buttons = [
                    ActionRow(
                        Button(
                            style=ButtonStyle.blurple,
                            custom_id="back",
                            emoji="<:back2:1071709332758073355>",
                            disabled=index==0
                        ),
                        Button(
                            style=ButtonStyle.blurple,
                            custom_id="forward",
                            emoji="<:forward2:1071709543840624660>",
                            disabled=index==len(pages) - 1
                        ),
                        Button(
                            style=ButtonStyle.red,
                            custom_id="close",
                            emoji="<:close2:1071709845436244018>"
                        )
                    )
                ]
            else:
                    buttons = [
                    ActionRow(
                        Button(
                            style=ButtonStyle.red,
                            custom_id="close",
                            emoji="<:close2:1071709845436244018>"
                        )
                    )
                ]
            return buttons

        def refresh_embed():
            embed.clear_fields()
            embed.set_footer(text=f"{ctx.author} | –°—Ç—Ä–∞–Ω–∏—Ü–∞ {index+1} –∏–∑ {len(pages)}", icon_url=ctx.author.display_avatar)
            for user in pages[index]:
                timestamp = pages[index][user]
                if timestamp > 1800000000: t = "–ù–∏–∫–æ–≥–¥–∞"
                else: t = f"<t:{timestamp}:f> (<t:{timestamp}:R>)"
                embed.add_field(name=user, value="> –î–∞—Ç–∞ —Ä–∞–∑–º—å—é—Ç–∞: " + t, inline=False)

        refresh_embed()
        msg = await ctx.send(embed = embed, components=refresh_buttons())
        async def refresh_all():
            refresh_embed()
            await msg.edit(embed=embed, components=refresh_buttons())

        def check(inter):
            return inter.message.id == msg.id

        while time.time() < time.time() + 600:
            inter = await self.bot.wait_for('interaction', check=check)
            if inter.author != ctx.author:
                await inter.reply("403 Forbidden", ephemeral=True)
            else:
                if inter.component.custom_id == "begin":
                    index = 0
                    await refresh_all()
                elif inter.component.custom_id == "back":
                    index -= 1
                    await refresh_all()
                if inter.component.custom_id == "forward":
                    index += 1
                    await refresh_all()
                if inter.component.custom_id == "end":
                    index = len(pages) - 1
                    await refresh_all()
                if inter.component.custom_id == "close":
                    break

        await msg.delete()


def setup(bot):
    bot.add_cog(ModCmd(bot))
