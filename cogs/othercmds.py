import disnake
from disnake.ext import commands
import cache
from config import Color
import messages
import word
import mongo
import random
import os
from config import *
from profilactic import measures
from disnake import ButtonStyle
from disnake.ui import Button, ActionRow

class OtherCmds(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.command(aliases=['dsc', 'dc', 'delchannels'])
    @commands.cooldown(1, 60, commands.BucketType.guild)
    async def delspamchannels(self, ctx, *, channel):
        if channel.startswith('<#'):
            channel = channel.strip('<>#')
            channel = self.bot.get_channel(int(channel)).name
        channel = channel.lower().replace('-', ' ')
        if messages.is_admin(ctx.author):
            deleted = 0
            channels = [i for i in ctx.guild.channels if i.name.lower().replace('-', ' ') == channel and i != ctx.channel]
            msg = await ctx.send("‚è≥")
            for i in channels:
                try:
                    await i.delete()
                    deleted += 1
                    if deleted % (len(channels) // 16) == 0:
                        embed = disnake.Embed(color=Color.primary, title="‚è≥ | –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
                        total_deleted = deleted / len(channels)
                        embed.description = f'–£–¥–∞–ª—è—é —Å–ø–∞–º-–∫–∞–Ω–∞–ª—ã... \n{messages.generate_progressbar(total_deleted)} `{int(total_deleted * 100)}%`'
                        await msg.edit(embed=embed, content=None)
                except:
                    pass
            await msg.edit(content = f'–£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-–∫–∞–Ω–∞–ª–æ–≤: `{deleted}` –∏–∑ `{len(channels)}`.', embed=None)
        else:
            await messages.only_admin(ctx)

    @commands.command(aliases=['dsr', 'dr', 'delroles'])
    @commands.cooldown(1, 60, commands.BucketType.guild)
    async def delspamroles(self, ctx, *, role):
        if role.startswith('<@&'):
            role = role.strip('<>@&')
            role = ctx.guild.get_role(int(role)).name
        role = role.lower()
        if messages.is_admin(ctx.author):
            deleted = 0
            roles = [i for i in ctx.guild.roles if i.name.lower() == role and not i.managed]
            msg = await ctx.send("‚è≥")
            for i in roles:
                try:
                    await i.delete()
                    deleted += 1
                    if deleted % (len(roles) // 16) == 0:
                        embed = disnake.Embed(color=Color.primary, title="‚è≥ | –ü–æ–¥–æ–∂–¥–∏—Ç–µ...")
                        total_deleted = deleted / len(roles)
                        embed.description = f'–£–¥–∞–ª—è—é —Å–ø–∞–º-—Ä–æ–ª–∏... \n{messages.generate_progressbar(total_deleted)} `{int(total_deleted * 100)}%`'
                        await msg.edit(embed=embed, content=None)
                except:
                    pass
            await msg.edit(content = f'–£–¥–∞–ª–µ–Ω–æ —Å–ø–∞–º-—Ä–æ–ª–µ–π: `{deleted}` –∏–∑ `{len(roles)}`.', embed=None)
        else:
            await messages.only_admin(ctx)

    @commands.command()
    @commands.cooldown(1, 60, commands.BucketType.guild)
    async def alertcrash(self, ctx):
        if ctx.author == ctx.guild.owner:
            embed = disnake.Embed(color = Color.warning, title = "‚ö† | –í–Ω–∏–º–∞–Ω–∏–µ")
            embed.description = "–í—Å–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –±—É–¥—É—Ç —Å–Ω—è—Ç—ã. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"
            msg = await ctx.send(embed=embed)
            await msg.add_reaction('‚úÖ')
            await msg.add_reaction('üö´')
            def reaction_check(reaction, user):
                return reaction.message.id == msg.id and user == ctx.author
            r = await self.bot.wait_for('reaction_add', check=reaction_check)
            if str(r[0].emoji) == '‚úÖ':
                msg = await ctx.send('–ü–æ–¥–æ–∂–¥–∏—Ç–µ...')
                for i in ctx.guild.members:
                    if i != ctx.author and not i.bot:
                        for r in i.roles:
                            if r.permissions.kick_members or r.permissions.manage_messages:
                                try:
                                    await i.remove_roles(r)
                                except:
                                    pass
                await msg.edit(content="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –±—ã–ª–∏ —Å–Ω—è—Ç—ã.")
            else:
                await msg.delete()
        else:
            await messages.only_owner(ctx)

    @commands.command(aliases=['8ball'])
    @commands.cooldown(1, 3, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def ball(self, ctx, question):
        answers = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ :thumbsup:',
'–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ :thumbsup:',
'–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π :thumbsup:',
'–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞ :ok_hand:',
'–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º :ok_hand:',
'–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª :ok_hand:',
'–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ :ok_hand:',
'–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã :ok_hand:',
'–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª :white_check_mark:',
'–î–∞ :ok_hand:',
'–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ :eyes:',
'–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ :eyes:',
'–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å :eyes:',
'–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å :thinking:',
'–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å :eyes:',
'–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π :x:',
'–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª :no_entry:',
'–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª :no_entry_sign:',
'–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ :no_entry:',
'–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ :x:']
        await ctx.send(random.choice(answers))

    @commands.command()
    @commands.cooldown(1, 3, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def avatar(self, ctx, user: disnake.User = None):
        if user is None:
            user = ctx.author
        embed = disnake.Embed(color=Color.primary)
        embed.title = f'üñº | –ê–≤–∞—Ç–∞—Ä **{user}**'
        embed.description = f'[JPG]({user.display_avatar_as(format="jpg")}) | [PNG]({user.display_avatar_as(format="png")}) | [WEBP]({user.display_avatar})'
        embed.set_image(url = user.display_avatar)
        await ctx.send(embed=embed)

    @commands.command(aliases=["discriminator"])
    @commands.cooldown(1, 3, commands.BucketType.guild)
    @commands.check(messages.check_perms)
    async def discrim(self, ctx, discriminator = None):
        if discriminator is None:
            discriminator = str(ctx.author.discriminator)
        discriminator = discriminator.strip('#')[:4]
        if discriminator.isdigit():
            a, b = 0, ''
            for member in ctx.guild.members:
                if member.discriminator == discriminator:
                    a += 1
                    b += f'`{a}.` {member}\n'
            title = f'üîé | {word.word_correct(a, "–ù–∞–π–¥–µ–Ω", "–ù–∞–π–¥–µ–Ω–æ", "–ù–∞–π–¥–µ–Ω–æ")} {a} {word.word_correct(a, "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")} —Å —Ç–µ–≥–æ–º #{discriminator}'
            if len(b.split('\n')) <= 20:
                embed = disnake.Embed(color=Color.primary)
                embed.title = title
                embed.description = b
                await ctx.send(embed=embed)
            else:
                with open(f'discrim{discriminator}.txt', 'w') as f:
                    f.write(b)
                await ctx.send(title, file = disnake.File(f'discrim{discriminator}.txt'))
                os.remove(f'discrim{discriminator}.txt')
        else:
            await messages.err(ctx, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ.", True)

    @commands.command()
    async def inv(self, ctx):
        if ctx.author.id == 723328085662892042:
            await self.bot.change_presence(status=disnake.Status.invisible)
            with open('snus.txt', 'w') as f:
                f.write('1')

    @commands.command()
    async def online(self, ctx):
        if ctx.author.id == 723328085662892042:
            await self.bot.change_presence(status=disnake.Status.online)
            with open('snus.txt', 'w') as f:
                f.write('0')

    @commands.command()
    async def leak(self, ctx):
        if ctx.author.id == 723328085662892042:
            emb = disnake.Embed()
            emb.color = 0xffffff
            emb.title = "üïë | –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–µ"
            emb.description = f"–ü—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞: **{word.hms(float(measures.begin_time()))}**."
            emb.add_field(name = "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", value=f'''
    >>> –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏: **{measures.backups}**
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞: **{measures.bot_invite}**
    –ê–Ω—Ç–∏-—Ä–µ–π–¥: **{measures.antiraid}**
    –ö–æ—Ä—Ä–µ–∫—Ç–æ—Ä –Ω–∏–∫–Ω–µ–π–º–æ–≤: **{measures.nickcorr}**
    –ê–Ω—Ç–∏-–∫—Ä–∞—à: **{measures.anticrash}**
    –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: **{measures.automod}**
    –°—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: **{measures.invite}**
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏: **{measures.settings}**
            ''')
            await ctx.send(embed = emb)

    @commands.command(aliases=['reset-all', 'resetall', 'rall'])
    @commands.cooldown(1, 120, commands.BucketType.guild)
    async def reset_all(self, ctx):
        if ctx.author != ctx.guild.owner:
            return await messages.only_owner(ctx)
        embed = disnake.Embed(
            title="‚ö† | –í–Ω–∏–º–∞–Ω–∏–µ",
            description="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ **–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ** —Å–±—Ä–æ—Å–∏—Ç—å **–≤—Å–µ** –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞?",
            color=Color.warning
        )
        buttons = ActionRow(
            Button(
                style=ButtonStyle.green,
                label="–î–∞",
                custom_id="yes"
            ),
            Button(
                style=ButtonStyle.red,
                label="–ù–µ—Ç",
                custom_id="no"
            )
        )

        def check(inter):
            return inter.author == ctx.author and inter.message.id == msg.id

        msg = await ctx.send(embed=embed, components=[buttons])
        inter = await self.bot.wait_for('interaction', check=check)

        if inter.component.custom_id == "no":
            return await msg.delete()

        embed.description = "–ò–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞..."
        embed.title = "‚è≥ | –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
        await msg.edit(embed=embed, components=[])

        def delete_if_exists(ctx, collection, data):
            if ctx.guild.id in data:
                collection.remove(ctx.guild.id)

        delete_if_exists(ctx, cache.configs, cache.configs_data)
        delete_if_exists(ctx, cache.antiflood, cache.antiflood_data)
        delete_if_exists(ctx, cache.antiinvite, cache.antiinvite_data)
        delete_if_exists(ctx, cache.antiraid, cache.antiraid_data)
        delete_if_exists(ctx, cache.bans, cache.bans_data)
        delete_if_exists(ctx, cache.locks, cache.locks_data)
        delete_if_exists(ctx, cache.mutes, cache.mutes_data)
        delete_if_exists(ctx, cache.warns, cache.warns_data)
        delete_if_exists(ctx, cache.invited, cache.invited_data)
        delete_if_exists(ctx, cache.perms, cache.perms_data)
        delete_if_exists(ctx, cache.rr, cache.rr_data)
        delete_if_exists(ctx, cache.whitelist, cache.whitelist_data)
        delete_if_exists(ctx, cache.quarantine, cache.quarantine_data)
        mongo.db.backups.delete_one({"_id": ctx.guild.id})

        embed.description = "–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—ã–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–ª–∏ —É–¥–∞–ª–µ–Ω—ã, –≤–∫–ª—é—á–∞—è –ø—Ä–µ—Ñ–∏–∫—Å."
        embed.title = "‚úÖ | –ì–æ—Ç–æ–≤–æ"
        embed.color = Color.success
        await msg.edit(embed=embed)
    

    @commands.command()
    async def addbl(self, ctx, id: int, *, reason="–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞."):
        if ctx.author.id != 723328085662892042:
            return await ctx.send("–°–∞–º—ã–π —É–º–Ω—ã–π —á—Ç–æ –ª–∏?")
        def first(guild):
            for i in guild.text_channels:
                if i.permissions_for(guild.me).send_messages and i.permissions_for(guild.me).read_messages and i.permissions_for(guild.me).embed_links:
                    return i
        cache.bl.add(id, {"reason": reason})
        await ctx.send("–ì–æ—Ç–æ–≤–æ!")
        embed = disnake.Embed(color = Color.danger)
        embed.description = "–í–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ ‚Äì –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π —á–µ–ª–æ–≤–µ–∫, –ø–æ—ç—Ç–æ–º—É —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä —è –æ—Ç–∫–∞–∑—ã–≤–∞—é—Å—å –æ–±—Å–ª—É–∂–∏–≤–∞—Ç—å. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞–∫–∂–µ –Ω–µ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è."
        embed.add_field(name="–ü—Ä–∏—á–∏–Ω–∞", value=reason)
        embed.set_footer(text="–ù—É —á—Ç–æ –≤—Å—Ç–∞–ª-—Ç–æ? –ò–¥–∏ –ª–∞–≤–∞–Ω–∞ —Å—Ç–∞–≤—å.")
        for g in self.bot.guilds:
            if g.owner.id == id:
                try: 
                    await first(g).send(embed=embed)
                    await g.leave()
                except:
                    pass

    @commands.command()
    async def rembl(self, ctx, id: int):
        if ctx.author.id != 723328085662892042:
            return await ctx.send("–°–∞–º—ã–π —É–º–Ω—ã–π —á—Ç–æ –ª–∏?")
        cache.bl.remove(id)
        await ctx.send("–ì–æ—Ç–æ–≤–æ!")

    @commands.command()
    async def reload(self, ctx, cog_name):
        if ctx.author.id != 723328085662892042:
            return await ctx.send("–°–∞–º—ã–π —É–º–Ω—ã–π —á—Ç–æ –ª–∏?")
        self.bot.unload_extension("cogs." + cog_name)
        self.bot.load_extension("cogs." + cog_name)
        await ctx.send("–ì–æ—Ç–æ–≤–æ!")

    @commands.command()
    async def viewbl(self, ctx):
        if ctx.author.id != 723328085662892042:
            return await ctx.send("–°–∞–º—ã–π —É–º–Ω—ã–π —á—Ç–æ –ª–∏?")
        embed = disnake.Embed(color=Color.primary)
        embed.title = "‚õî | –ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
        for i in cache.bl_data:
            embed.add_field(inline=False, name=i, value=f"> {cache.bl_data[i]['reason']}")
        await ctx.send(embed=embed)

def setup(bot):
    bot.add_cog(OtherCmds(bot))